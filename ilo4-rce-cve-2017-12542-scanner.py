#!/usr/bin/env python3

##################################
# Written by: sk1dish
# Date: 8/22/2019
##################################

import requests
import json
import multiprocessing
from datetime import datetime
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# startTime = datetime.now()

def getVersion(ip):
    url = "https://%s/json/login_session" % (str(ip))
    try:
        r = requests.get(url, timeout=5, verify=False)
        if ('moniker' in r.json()):
            mainver = (r.json()['moniker']['PRODGEN'])
            subver = (r.json()['version'])
            if (subver <= '2.53' and mainver == 'iLO 4'):
                print(("%s,%s,%s,VULNERABLE") % (ip, mainver, subver))
            else:
                print(("%s,%s,%s") % (ip, mainver, subver))
        if ('moniker' not in r.json()):
            subver = (r.json()['version'])
            print(("%s,iLO 4,%s,VULNERABLE") % (ip, subver))
    except:
        pass

if __name__ == '__main__':
    import argparse
    import sys
    parser = argparse.ArgumentParser(description="Crawl list of IP's or hostnames looking for HP iLO 4 vulnerable versions.")
    parser.add_argument('-ip', help="Specify IP's to check (multiple IP's/hostnames surrounded by double quotes with a space between them)")
    parser.add_argument('-iL', help="Path to file containing one IP/hostname per line to crawl")
    
    args = parser.parse_args()

    if args.ip is None and args.iL is None:
        print(("An argument is required. Run %s -h for help.") % (__file__))
        sys.exit()

    if args.ip:
        print("IP Address,iLO Generation,iLO Version,Vulnerability Status")
        ip = args.ip.split( )
        pool = multiprocessing.Pool()
        pool.map(getVersion, ip)

    if args.iL:
        print("IP Address,iLO Generation,iLO Version,Vulnerability Status")
        with open(args.iL) as f:
            ip = f.read().splitlines()
            pool = multiprocessing.Pool()
            pool.map(getVersion, ip)

#    print("Time to complete: %s" % (datetime.now() - startTime))
